# -*- coding: utf-8 -*-
"""rbi-bank-tx-stat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1787J6Z2jpNYDdaAguIGzPQllKKN9gqHs
"""

import os
import sys
import logging
import numpy as np
import pandas as pd
from decimal import Decimal

_logger_ = None


def get_logger():
    global _logger_
    if _logger_ is None:
        log_format = "%(asctime)s %(levelname)s - %(message)s"
        formatter = logging.Formatter(log_format)
        handler = logging.StreamHandler(sys.stderr)
        handler.setLevel(logging.DEBUG)
        handler.set_name("root")
        handler.setFormatter(formatter)
        _logger_ = logging.getLogger()
        _logger_.setLevel(logging.DEBUG)
        _logger_.handlers = [handler]

    return logging.getLogger()


def running_colab():
    """returns True if using colab."""
    return os.getenv("COLAB_RELEASE_TAG") is not None or "COLAB_GPU" in os.environ


def running_standalone():
    return __name__ == "__main__"


GOOGLE_DRIVE_XLS_DOC_ROOT = "/content/drive/MyDrive/dsf-ads5703/"

LOCAL_XLS_DOC_ROOT = "./data/"


def auth_google_drive_access():
    if running_colab():
        from google.colab import drive

        drive.mount("/content/drive/", readonly=True)


auth_google_drive_access()


def internet_banking_data(workbook, sheet_names):
    """
    'workbook' is the xls or xlsx document object
    'sheet_names' is a list of (one or more) sheet names in the workbook.
    On success, returns a reference to the loaded sheet.
    returns None otherwise.
    """

    logger = get_logger()

    def conv(x):
        if type(x) == str:
            return x
        return str(np.around(x, 2))

    for sheet_name in sheet_names:
        try:
            ib_df = pd.read_excel(
                workbook,
                sheet_name,
                engine="openpyxl",
                usecols=[1, 2, 3, 4, 5],
                skiprows=3,
                skipfooter=2,
                names=["Sln", "Bank", "Volume", "Value", "Active Customers"],
                converters={"Value": conv},
            )
            return ib_df
        except Exception as ex:
            pass

    logger.warning(f"internet_banking_data: data sheet not foind in '{workbook.name}'")
    return None


def mobile_banking_data(workbook, sheet_names):
    logger = get_logger()
    for sheet_name in sheet_names:
        try:
            ib_df = pd.read_excel(
                workbook,
                sheet_name,
                engine="openpyxl",
                usecols=[1, 2, 3, 4],
                skiprows=2,
                skipfooter=3,
                names=["Sln", "Bank", "Volume", "Value"],
            )
            return ib_df
        except Exception as ex:
            pass

    logger.warning(f"mobile_banking_data: data sheet not found in '{workbook.name}'")
    return None


def xlsx(path):
    logger = get_logger()
    try:
        xls_doc = open(path, "rb")
        # print(xls_doc)
        return xls_doc
    except Exception as ex:
        logger.error(str(ex))
    return None


def test_banking_stat():
    doc_names = [
        "RTGSNEFTMISMARCH20251A8E4422C463474EBC88BF6BFC026A0B.XLSX",
        "RTGSNEFTJAN25CD5E02D1321249779606FFE4BADF8439.XLSX",
        "RTGSNEFTAPRIL2025C5C14916CD804966A715D63CC56A1D24.XLSX",
        "NEFT122020A5CD3A009E1B45ADAFAA5EF5038476F9.XLSX",
    ]

    if running_colab():
        doc_path_base = GOOGLE_DRIVE_XLS_DOC_ROOT
    else:
        doc_path_base = LOCAL_XLS_DOC_ROOT

    docs = [
        doc_path_base + doc_names[0],
        doc_path_base + doc_names[1],
        doc_path_base + doc_names[2],
        doc_path_base + doc_names[3],
    ]

    rbi_docs = [
        (
            docs[0],
            True,
            True,
        ),
        (
            docs[1],
            True,
            True,
        ),
        (
            docs[2],
            True,
            True,
        ),
        (
            docs[3],
            False,
            True,
        ),
    ]

    logger = get_logger()
    for doc, has_ib, has_mb in rbi_docs:
        logger.info(f"reading {doc}")
        xls_doc = xlsx(doc)
        assert xls_doc is not None
        ibd = internet_banking_data(xls_doc, ["Internet Banking", "Internet Banking "])
        assert not has_ib or ibd is not None
        mbd = mobile_banking_data(
            xls_doc,
            [
                "Mobile ",
                "Mobile banking ",
                "Mobile",
                "Mobile banking",
                "Mobile Banking",
            ],
        )
        assert not has_mb or mbd is not None


logger = get_logger()
logger.info("Started importing data...")
test_banking_stat()
logger.info("Finished!")
